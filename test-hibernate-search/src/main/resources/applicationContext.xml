<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation=
		   "http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-3.0.xsd
			http://www.springframework.org/schema/aop
			http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
			http://www.springframework.org/schema/tx
			http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	
	<!-- ******************************Spring配置****************************** -->
	
    <!-- 指定Spring注解要扫描的包 -->
	<context:component-scan base-package="test" />
	
	<!-- 事务 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- 引入属性文件 -->
	<bean id="myConfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:application.properties</value>
			</list>
		</property>
	</bean>
	
	
	<!-- ******************************Hibernate配置****************************** -->
	
	<!-- Hibernate.c3p0数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${db.driver}" />			<!-- 驱动 -->
		<property name="jdbcUrl" value="${db.url}" />					<!-- 连接字符串 -->
		<property name="user" value="${db.username}" />					<!-- 用户名 -->
		<property name="password" value="${db.password}" />				<!-- 密码 -->
		<property name="maxPoolSize" value="${db.maxPoolSize}" />		<!-- 连接池中保留的最大连接数（默认：15） -->
		<property name="minPoolSize" value="1" />						<!-- 连接池中保留的最小连接数（默认：0）-->
		<property name="initialPoolSize" value="1" />					<!-- 初始化时获取几个连接，取值应在minPoolSize与maxPoolSize之间（默认：3） -->
		<property name="acquireIncrement" value="1" />					<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数（默认：3） -->
		<property name="maxIdleTime" value="25000"/>					<!-- 最大空闲时间，定义多少秒内未使用则连接被丢弃，若为0则永不丢弃（默认：0） -->
		<property name="checkoutTimeout" value="1000"/>					<!-- 当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待，单位毫秒（默认：0） -->
		<property name="idleConnectionTestPeriod" value="18000"/>		<!-- 隔多少秒检查所有连接池中的空闲连接，0表示不检查（默认：0） -->
		<property name="testConnectionOnCheckin" value="true" />		<!-- 如果设为true那么在取得连接的同时将校验连接的有效性（默认：false） -->
		<property name="automaticTestTable" value="T_TEST_C3P0" />		<!-- c3p0将建一张名为T_TEST_C3P0的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试使用（默认: null） -->
		<property name="maxStatements" value="100"/>					<!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量，但由于预缓存的statements属于单个connection而不是整个连接池，所以设置这个参数需要考虑到多方面的因素。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭（默认：0) -->
		<property name="debugUnreturnedConnectionStackTraces" value="true"/>	<!-- 启用之后(true)，对于每个从连接池拿出去的数据库连接，如果一段时间内没有归还，C3P0就会强制关闭这个连接，并将获取连接时的stack trace，以抛出异常的方式显示出来（默认：false） -->
		<property name="unreturnedConnectionTimeout" value="600"/>		<!-- 用于设置开启debugUnreturnedConnectionStackTraces后的超时时间（单位：秒） -->
		<!-- 以下为默认 -->
		<property name="breakAfterAcquireFailure" value="false"/>		<!-- 获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭（默认：false） -->
		<property name="autoCommitOnClose" value="false"/>				<!-- 连接关闭时默认将所有未提交的操作回滚（默认：false） -->
		<property name="acquireRetryDelay" value="1000"/>				<!-- 两次连接中间隔时间，单位毫秒（默认：1000） -->
		<property name="acquireRetryAttempts" value="30"/>				<!-- 定义在从数据库获取新连接失败后重复尝试的次数（默认：30） -->
	</bean>
	
	<!-- Hibernate会话工厂 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">	<!-- Hibernate4统一为org.springframework.orm.hibernate4.LocalSessionFactoryBean -->
		<property name="packagesToScan" value="test.entity"/>		<!-- 指定Hibernate注解要扫描的包 -->
		<property name="namingStrategy" ref="dbNamingStrategy" />			<!-- 指定数据库命名策略 -->
		<property name="entityInterceptor" ref="entityInterceptor" />		<!-- 指定实体拦截器 -->
		<property name="dataSource" ref="dataSource"/>						<!-- 指定数据源 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${db.hibernate.dialect}</prop>			<!-- 数据库方言 -->
				<prop key="hibernate.hbm2ddl.auto">${db.hibernate.hbm2ddl.auto}</prop>	<!-- 自动建表 -->
				<prop key="hibernate.show_sql">${db.hibernate.show_sql}</prop>			<!-- 在控制台打印SQL语句 -->
				<prop key="hibernate.format_sql">${db.hibernate.format_sql}</prop>		<!-- 将打印的语句格式化 -->
				<prop key="hibernate.jdbc.fetch_size">50</prop>							<!-- 每次从数据库中取出的记录条数 -->
				<prop key="hibernate.jdbc.batch_size">30</prop>							<!-- 批量增删改的批次大小 -->
				<prop key="current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>	<!-- Hibernate4集成Spring3必配 -->
			</props>
		</property>
	</bean>
	
	<!-- Hibernate数据库命名策略 -->
	<bean id="dbNamingStrategy" class="fuc.common.hibernate.DbNamingStrategy">
		<property name="tablePrefix" value="${db.NamingStrategy.tablePrefix}" />		<!-- 数据库表名前缀 -->
		<property name="columnPrefix" value="${db.NamingStrategy.columnPrefix}" />		<!-- 数据库列名前缀 -->
		<property name="isAddUnderscores" value="true" />								<!-- 是否以下划线形式命名 -->
		<property name="maxLength" value="30" />										<!-- 命名最大长度限制 -->
    </bean>
    
    
    
    <!-- ******************************Bean配置****************************** -->
    
    <bean id="baseDao" class="fuc.common.hibernate.BaseDao">
    	<property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <bean id="baseService" class="fuc.common.spring.BaseService"/>
    <bean id="entityInterceptor" class="fuc.common.hibernate.EntityInterceptor"/>
</beans>